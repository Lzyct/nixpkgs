"" Base Settings
"" =============
let mapleader = " "
let g:mapleader = " "
set linenumber
set showmode
set showcmd

set ignorecase
set smartcase
set incsearch
set hlsearch

set visualbell
set encoding=utf8
set scrolloff=3 " 3 lines above/below cursor when scrolling

"open on terminal"
nnoremap <leader>t :action Terminal.OpenInTerminal<CR>

" Distraction free mode"
nnoremap <c-z> :action ToggleDistractionFreeMode<cr>

"" Plugins  --------------------------------
""" Surround Plugin  --------------------------------
" Emulates vim-surround. Mappings to easily delete, change and add such surroundings in pairs
" Basic Commands:
"  Old text                  Command     New text ~
"  "Hello *world!"           ds"         Hello world!
"  [123+4*56]/2              cs])        (123+456)/2
"  "Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
"  if *x>3 {                 ysW(        if ( x>3 ) {
"  my $str = *whee!;         vllllS'     my $str = 'whee!';
" See https://github.com/tpope/vim-surround/blob/master/doc/surround.txt for details
set surround

""" argtextobj  Plugin  --------------------------------
" Emulates argtextobj. Provides a text-object 'a' for function arguments
" Text object
" ai
" aa
" See https://www.vim.org/scripts/script.php?script_id=2699 for details
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"

"""  exchange Plugin  --------------------------------
" Emulates exchange.vim. Text exchange
" Basic Commands:
"   cx    First use to define the exchange, second use defines the second and exchange
"   cxx   Like cx for an entire line
"   X     Like cx for visual mode
" See https://www.vim.org/scripts/script.php?script_id=2699 for details
Plug 'tommcdo/vim-exchange'

""" easy motion plugin  --------------------------------
" Emulates vim-easymotion
" Make sure to install IdeaVim-EasyMotion and AceJump Plugins
" Basic Commands:
"   easy-motion-s Search backward
"   easy-motion-f Search forward
" See https://github.com/AlexPl292/IdeaVim-EasyMotion#supported-commands for details
Plug 'easymotion/vim-easymotion'
map <leader>j <Plug>(easymotion-s)

""" NERDTree plugin  --------------------------------
" Emulates NERDTree
" Basic Commands:
"   Ctrl-n  Open NERDTree (mapped bellow)
"   q	    Close the NERDTree windowe
"   o   	Open files, directories and bookmarks
"   go   	Open selected file, but leave cursor in the NERDTree
"   i   	Open selected file in a split window
"   gi   	Same as i, but leave the cursor on the NERDTree
"   s   	Open selected file in a new vsplit
"   gs   	Same as s, but leave the cursor on the NERDTree
"   <C-J>	Jump down to next sibling of the current directory
"   <C-K>	Jump up to previous sibling of the current directory
"   R	    Recursively refresh the current root
"   m	    Display the NERDTree menu
" See  https://github.com/JetBrains/ideavim/wiki/NERDTree-support for details
set NERDTree
map <c-n> :NERDTreeToggle<CR>

""" multiple-cursors plugin  --------------------------------
" Emulates vim-multiple-cursors
" Basic Commands:
"   <C-n> start multicursor
"   <C-n> next match
"   <C-x> skip next match
"   <C-p> remove current match and go back to previous one
" See https://github.com/terryma/vim-multiple-cursors for details
set multiple-cursors
map mc <A-n>
map mx <A-x>
map mp <A-p>

""" Commentary plugin  --------------------------------
Plug 'tpope/vim-commentary'

""" ReplaceWithRegister plugin  --------------------------------
" Emulates  ReplaceWithRegister
" Basic Commands:
"   [count]["x]grr          Replace [count] lines with the contents of register x.
"   {Visual}["x]gr          Replace the selection with the contents of register x.
" See https://github.com/vim-scripts/ReplaceWithRegister for details
Plug 'vim-scripts/ReplaceWithRegister'


""" textobj-entire plugin  --------------------------------
" Emulates  vim-textobj-entire
" Basic Commands:
"   {motion}ae    Apply motion on entire text
"   {motion}ie    Apply motion on entire text w/o trailing and leading empty lines
" See https://github.com/kana/vim-textobj-entire for details
set textobj-entire

""" highlightedyank plugin  --------------------------------
" Emulates vim-highlightedyank
" Highlight yanked text
" See https://github.com/machakann/vim-highlightedyank for details
Plug 'machakann/vim-highlightedyank'


Plug 'michaeljsmith/vim-indent-object'


" Which-key settings
set which-key
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_FontFamily = "MonoLisaAlt Nerd Font"
let g:WhichKey_FontSize = 14
let g:WhichKey_CommandColor = "#a6e3a1"
let g:WhichKey_PrefixColor = "#cba6f7"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_leader = "<leader>x Open file explorer"
let g:WhichKeyDesc_leader = "<leader>/ Find in file"

let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

let g:WhichKeyDesc_multiple_cursor = "m Multiple cursors"
let g:WhichKeyDesc_multiple_cursor_next = "mc selects the next match"
let g:WhichKeyDesc_multiple_cursor_skip = "mx skips to the next match"
let g:WhichKeyDesc_multiple_cursor_remove = "mp removes current match and goes back to the previous one"

let g:WhichKeyDesc_open_in_terminal = "<leader>t Open in terminal"

let g:WhichKeyDesc_comment = "<leader>c Comment line"

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>ws Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wc Unsplit"
let g:WhichKeyDesc_window_split_unsplit_all = "<leader>wC Unsplit All"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"

"let g:WhichKeyDesc_display = "<leader>d Display options"
"let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
"let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
"let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"

let g:WhichKeyDesc_goto = "<leader>g Go to X"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

" EasyMotion settings
set easymotion
set notimeout


" increase the timeoutlen (default: 1000), don't add space around the equal sign
set timeoutlen=5000
set selectmode+=key

" Enable relative number
set relativenumber number

"higlighttedyank"
set higlightedyank
let g:highlightedyank_highlight_duration = "1000"


" Copy to system clipboard as well
set clipboard+=unnamed
" Use Idea to join lines smartly
"set ideajoin
" Multiple cursors support
"set multiple-cursors
" d only delete dont copy into clipboard"

nnoremap x "_x
nnoremap X "_X
nnoremap d "_d
nnoremap D "_D
vnoremap d "_d
nnoremap s "_s
nnoremap S "_S
vnoremap s "_s
" replace currently selected text with default register
" without yanking it
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
  nnoremap <leader>d "+d
  nnoremap <leader>D "+D
  vnoremap <leader>d "+d
else
  set clipboard=unnamed
  nnoremap <leader>d "*d
  nnoremap <leader>D "*D
  vnoremap <leader>d "*d
endif
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
  nnoremap <leader>s "+s
  nnoremap <leader>S "+S
  vnoremap <leader>s "+s
else
  set clipboard=unnamed
  nnoremap <leader>s "*s
  nnoremap <leader>S "*S
  vnoremap <leader>s "*s
  endif
" Use Q for formatting the current paragraph (or visual selection)
 vmap Q gq
 nmap Q gqap
" These create newlines like o and O but stay in normal mode
 nmap zj o<Esc>k
 nmap zk O<Esc>j
" key bindings for quickly moving between windows
" h left, l right, k up, j down
" nmap <leader>h <c-w>h
" nmap <leader>l <c-w>l
" nmap <leader>k <c-w>k
" nmap <leader>j <c-w>j
" Closing tabs

nmap <leader>q :action CloseContent<cr>
nmap <leader>Q :action ReopenClosedTab<cr>
" To navigate between split panes
nmap <leader>wo :action NextSplitter<cr>
nmap <leader>wp :action PrevSplitter<cr>
" Splits manipulation
nmap <leader>ws :action SplitHorizontally<cr>
nmap <leader>wv :action SplitVertically<cr>
nmap <leader>wc :action Unsplit<cr>
nmap <leader>wC :action UnsplitAll<cr>
nmap <leader>wd :action OpenEditorInOppositeTabGroup<cr>
nmap <leader><leader> :action VimFilePrevious<cr>
" nmap <leader>ww :action JumpToLastWindow<cr>
" Navigation
nmap <leader>h :action Back<cr>
nmap <leader>l :action Forward<cr>
nmap <leader>L :action RecentLocations<cr>
nmap <leader>g :action GotoDeclaration<cr>
nmap <leader>u :action FindUsages<cr>
nmap <leader>f :action GotoFile<cr>
nmap <leader>c :action GotoClass<cr>
nmap <leader>s :action GotoSymbol<cr>
" nmap <leader>m :action FileStructurePopup<cr>
nmap <leader>; :action FileStructurePopup<cr>
nmap <leader>M :action ActivateStructureToolWindow<cr>
nmap <leader>d :action ShowErrorDescription<cr>
nmap <leader>i :action GotoImplementation<cr>
nmap <leader>I :action SelectIn<cr>
nmap <leader>e :action RecentFiles<cr>
nmap <leader>p :action JumpToLastWindow<cr>
nmap <leader>b :action ShowBookmarks<cr>
" nmap <leader>a :action Switcher<cr>
nmap <leader>a :action RecentChangedFiles<cr>
" Errors
nmap <leader>x :action GotoNextError<cr>
nmap <leader>X :action GotoPreviousError<cr>
" Refactorings
vmap T :action Refactorings.QuickListPopupAction<cr>
nmap <leader>rr :action RenameElement<cr>
nmap <leader>rg :action Generate<cr>
nmap <leader>rI :action OptimizeImports<cr>
" Inspection
nmap <leader>rc :action InspectCode<cr>
" VCS operations
nmap <leader>yy :action Vcs.Show.Local.Changes<cr>
nmap <leader>yp :action Vcs.QuickListPopupAction<cr>
nmap <leader>ya :action Annotate<cr>
nmap <leader>yl :action Vcs.Show.Log<cr>
nmap <leader>yd :action Compare.LastVersion<cr>
" nmap <leader>yr :action Git.ResolveConflicts<cr>
" Terminal
nmap <leader>T :action ActivateTerminalToolWindow<cr>
" External GVim
nmap <leader>v :action Tool_External Tools_gvim<cr>
" External Emacs
nmap <leader>E :action Tool_External Tools_emacsclient<cr>
" External Sublime Text
nmap <leader>S :action Tool_External Tools_sublime_text<cr>
" IdeaVim uses 'a' for alt instead of Vim's 'm'
nmap <a-j> 15gj
nmap <a-k> 15gk
" Won't work in visual mode (with vmap) for some reason.
" Use default map of <c-/> for that.
nmap gcc :action CommentByLineComment<cr>
" unimpaired mappings - from https://github.com/saaguero/ideavimrc/blob/master/.ideavimrc
nnoremap [<space> O<esc>j
nnoremap ]<space> o<esc>k
nnoremap [q :action PreviousOccurence<cr>
nnoremap ]q :action NextOccurence<cr>
nnoremap [m :action MethodUp<cr>
nnoremap ]m :action MethodDown<cr>
nnoremap [c :action VcsShowPrevChangeMarker<cr>
nnoremap ]c :action VcsShowNextChangeMarker<cr>
" Tabs
nnoremap [a :action PreviousTab<cr>
nnoremap [s :action NextTab<cr>
" Search
nmap <leader>/ :action Find<cr>
nmap <leader>\ :action FindInPath<cr>
" Moving lines
nmap [e :action MoveLineUp<cr>
nmap ]e :action MoveLineDown<cr>
" Moving statements
nmap ]a :action MoveStatementUp<cr>
nmap ]s :action MoveStatementDown<cr>
" Building, Running and Debugging
nmap ,c :action CompileDirty<cr>
nmap ,r :action Run<cr>
nmap ,R :action RunAnything<cr>
nmap ,b :action Debug<cr>
nmap ,c :action RunClass<cr>
nmap ,d :action DebugClass<cr>
nmap ,t :action RerunTests<cr>
nmap ,T :action RerunFailedTests<cr>

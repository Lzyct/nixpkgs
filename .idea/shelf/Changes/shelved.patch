Index: flake.nix
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  description = \"Lzyctâ€™s Nix darwin system configs, and some other useful stuff.\";\n\n  inputs = {\n    # Package sets\n    nixpkgs.url = \"github:nixos/nixpkgs/nixpkgs-21.11-darwin\";\n    nixpkgs-master.url = \"github:NixOS/nixpkgs/master\";\n    nixpkgs-stable.url = \"github:NixOS/nixpkgs/nixpkgs-22.11-darwin\";\n    nixpkgs-unstable.url = \"github:NixOS/nixpkgs/nixpkgs-unstable\";\n    nixos-stable.url = \"github:NixOS/nixpkgs/nixos-22.11\";\n\n    # Environment/system management\n    darwin.url = \"github:lnl7/nix-darwin/master\";\n    darwin.inputs.nixpkgs.follows = \"nixpkgs-unstable\";\n\n    # Home manager\n    home-manager.url = \"github:nix-community/home-manager\";\n    home-manager.inputs.nixpkgs.follows = \"nixpkgs-unstable\";\n\n    # Other sources\n    # comma = { url = github:Shopify/comma; flake = false; };\n    flake-compat = { url = github:edolstra/flake-compat; flake = false; };\n    flake-utils.url = github:numtide/flake-utils;\n  };\n\n  outputs = { self, darwin,nixpkgs, home-manager, flake-utils, ... }@inputs:\n    let\n      # Some building blocks ------------------------------------------------------------------- {{{\n\n      inherit (darwin.lib) darwinSystem;\n      inherit (inputs.nixpkgs-unstable.lib) attrValues makeOverridable optionalAttrs singleton;\n\n      # Configuration for `nixpkgs`\n      nixpkgsConfig = {\n        config = { allowUnfree = true; };\n        overlays = attrValues self.overlays ++ [\n          # Sub in x86 version of packages that don't build on Apple Silicon yet\n          (final: prev: (optionalAttrs (prev.stdenv.system == \"aarch64-darwin\") {\n            inherit (final.pkgs-x86)\n \t      nix-index;\n          }))\n          (final: prev: {\n            # TODO: remove when `nvim-lastplace` lands in `nixpkgs-unstable`\n            vimPlugins = prev.vimPlugins.extend (_: _: {\n              inherit (final.pkgs-master.vimPlugins) nvim-lastplace;\n            });\n          })\n        ];\n      };\n\n      homeManagerStateVersion = \"22.11\";\n\n      primaryUserInfo = {\n        username = \"lzyct\";\n        fullName = \"Lzyct\";\n        email = \"hey.mudassir@gmail.com\";\n        nixConfigDirectory = \"/Users/lzyct/.config/nixpkgs\";\n      };\n\n      # Modules shared by most `nix-darwin` personal configurations.\n      nixDarwinCommonModules = attrValues self.darwinModules ++ [\n        # `home-manager` module\n        home-manager.darwinModules.home-manager\n        (\n          { config, ... }:\n          let\n            inherit (config.users) primaryUser;\n          in\n          {\n            nixpkgs = nixpkgsConfig;\n            # Hack to support legacy worklows that use `<nixpkgs>` etc.\n            # nix.nixPath = { nixpkgs = \"${primaryUser.nixConfigDirectory}/nixpkgs.nix\"; };\n            nix.nixPath = { nixpkgs = \"${inputs.nixpkgs-unstable}\"; };\n            # `home-manager` config\n            users.users.${primaryUser.username}.home = \"/Users/${primaryUser.username}\";\n            home-manager.useGlobalPkgs = true;\n            home-manager.useUserPackages = true;\n            home-manager.users.${primaryUser.username} = {\n              imports = attrValues self.homeManagerModules;\n              home.stateVersion = homeManagerStateVersion;\n              home.user-info = config.users.primaryUser;\n            };\n            # Add a registry entry for this flake\n            nix.registry.my.flake = self;\n          }\n        )\n      ];\n    in\n    {\n\n      # System outputs ------------------------------------------------------------------------- {{{\n      # My `nix-darwin` configs\n      darwinConfigurations = rec {\n        # Mininal configurations to bootstrap systems\n        bootstrap-x86 = makeOverridable darwinSystem {\n          system = \"x86_64-darwin\";\n          modules = [ ./darwin/bootstrap.nix { nixpkgs = nixpkgsConfig; } ];\n        };\n        bootstrap-arm = bootstrap-x86.override { system = \"aarch64-darwin\"; };\n\n        # My Apple Silicon macOS laptop config\n        Lzyct = darwinSystem {\n          system = \"aarch64-darwin\";\n          modules = nixDarwinCommonModules ++ [\n            {\n              users.primaryUser = primaryUserInfo;\n              networking.computerName = \"Lzyct \uD83D\uDCBB\";\n              networking.hostName = \"Lzyct-MBP\";\n              networking.knownNetworkServices = [\n                \"Wi-Fi\"\n                \"USB 10/100/1000 LAN\"\n              ];\n            }\n          ];\n        };\n\n        # Config with small modifications needed/desired for CI with GitHub workflow\n        githubCI = darwinSystem {\n          system = \"x86_64-darwin\";\n          modules = nixDarwinCommonModules ++ [\n            ({ lib, ... }: {\n              users.primaryUser = primaryUserInfo // {\n                username = \"runner\";\n                nixConfigDirectory = \"/Users/runner/work/nixpkgs/nixpkgs\";\n              };\n              homebrew.enable = lib.mkForce false;\n            })\n          ];\n        };\n      };\n\n#   TODO: Need to fix it\n#    homeConfigurations.lzyct =\n#    let\n#        pkgs = import inputs.nixpkgs-unstable (nixpkgsConfig // { system = \"aarch64-linux\"; });\n#    in\n#    inputs.home-manager.lib.homeManagerConfiguration {\n#      inherit pkgs;\n#      modules = attrValues self.homeManagerModules ++ singleton ({ config, ... }: {\n#                    home.username = primaryUserInfo.username;\n#                    home.homeDirectory = \"/${if pkgs.stdenv.isDarwin then \"Users\" else \"home\"}/${primaryUserInfo.username}\";\n#                    home.stateVersion = homeManagerStateVersion;\n#                    home.user-info = primaryUserInfo // {\n#                    nixConfigDirectory = \"${primaryUserInfo.nixConfigDirectory}\";\n#                     };\n#                });\n#    };\n\n      # Non-system outputs --------------------------------------------------------------------- {{{\n\n      overlays = {\n        # Overlays to add different versions `nixpkgs` into package set\n        pkgs-master = _: prev: {\n          pkgs-master = import inputs.nixpkgs-master {\n            inherit (prev.stdenv) system;\n            inherit (nixpkgsConfig) config;\n          };\n        };\n        pkgs-stable = _: prev: {\n          pkgs-stable = import inputs.nixpkgs-stable {\n            inherit (prev.stdenv) system;\n            inherit (nixpkgsConfig) config;\n          };\n        };\n        pkgs-unstable = _: prev: {\n          pkgs-unstable = import inputs.nixpkgs-unstable {\n            inherit (prev.stdenv) system;\n            inherit (nixpkgsConfig) config;\n          };\n        };\n\n        #prefmanager = _: prev: {\n        #  prefmanager = inputs.prefmanager.packages.${prev.stdenv.system}.default;\n        #};\n\n        # Overlay that adds various additional utility functions to `vimUtils`\n        # vimUtils = import ./overlays/vimUtils.nix;\n\n        # Overlay that adds some additional Neovim plugins\n        # vimPlugins = final: prev:\n        #  let\n        #    inherit (self.overlays.vimUtils final prev) vimUtils;\n        #  in\n        #  {\n        #    vimPlugins = prev.vimPlugins.extend (_: _:\n        #      vimUtils.buildVimPluginsFromFlakeInputs inputs [\n        #        # Add flake input name here\n        #      ]\n        #    );\n        #  };\n\n        # Overlay useful on Macs with Apple Silicon\n        apple-silicon = _: prev: optionalAttrs (prev.stdenv.system == \"aarch64-darwin\") {\n          # Add access to x86 packages system is running Apple Silicon\n          pkgs-x86 = import inputs.nixpkgs-unstable {\n            system = \"x86_64-darwin\";\n            inherit (nixpkgsConfig) config;\n          };\n        };\n\n        # Overlay to include node packages listed in `./pkgs/node-packages/package.json`\n        # Run `nix run my#nodePackages.node2nix -- -14` to update packages.\n        #nodePackages = _: prev: {\n        #  nodePackages = prev.nodePackages // import ./pkgs/node-packages { pkgs = prev; };\n        #};\n\n        # Overlay that adds `lib.colors` to reference colors elsewhere in system configs\n        #colors = import ./overlays/colors.nix;\n      };\n\n      darwinModules = {\n        # My configurations\n        lzyct-bootstrap = import ./darwin/bootstrap.nix;\n        lzyct-defaults = import ./darwin/defaults.nix;\n        lzyct-general = import ./darwin/general.nix;\n        lzyct-homebrew = import ./darwin/homebrew.nix;\n\n        # Modules I've created\n        users-primaryUser =\n          { lib, ... }:\n          let\n            inherit (lib) mkOption types;\n          in\n          {\n            options = {\n              users.primaryUser = {\n                username = mkOption {\n                  type = with types; nullOr string;\n                  default = null;\n                };\n                fullName = mkOption {\n                  type = with types; nullOr string;\n                  default = null;\n                };\n                email = mkOption {\n                  type = with types; nullOr string;\n                  default = null;\n                };\n                nixConfigDirectory = mkOption {\n                  type = with types; nullOr string;\n                  default = null;\n                };\n              };\n            };\n          };\n        programs-nix-index =\n          # Additional configuration for `nix-index` to enable `command-not-found` functionality with Fish.\n          { config, lib, pkgs, ... }:\n\n          {\n            config = lib.mkIf config.programs.nix-index.enable {\n              programs.fish.interactiveShellInit = ''\n                function __fish_command_not_found_handler --on-event=\"fish_command_not_found\"\n                  ${if config.programs.fish.useBabelfish then ''\n                  command_not_found_handle $argv\n                  '' else ''\n                  ${pkgs.bashInteractive}/bin/bash -c \\\n                    \"source ${config.programs.nix-index.package}/etc/profile.d/command-not-found.sh; command_not_found_handle $argv\"\n                  ''}\n                end\n              '';\n            };\n          };\n      };\n\n      homeManagerModules = {\n        # My configurations\n        lzyct-config-files = import ./home/config-files.nix;\n        lzyct-git = import ./home/git.nix;\n        lzyct-fish = import ./home/fish.nix;\n        lzyct-starship = import ./home/starship.nix;\n        lzyct-vim = import ./home/vim.nix;\n        # lzyct-go = import ./home/go.nix;\n        lzyct-packages = import ./home/packages.nix;\n\n        # Modules I've created\n        # programs-neovim-extras = import ./modules/home/programs/neovim/extras.nix;\n        home-user-info = { lib, ... }: {\n          options.home.user-info =\n            (self.darwinModules.users-primaryUser { inherit lib; }).options.users.primaryUser;\n        };\n      };\n      #I }}}\n\n      # Add re-export `nixpkgs` packages with overlays.\n      # This is handy in combination with `nix registry add my /Users/Lzyct/.config/nixpkgs`\n    } // flake-utils.lib.eachDefaultSystem (system: {\n      legacyPackages = import inputs.nixpkgs-unstable {\n        inherit system;\n        inherit (nixpkgsConfig) config;\n        overlays = with self.overlays; [\n          pkgs-master\n          pkgs-stable\n          apple-silicon\n        ];\n      };\n    });\n}\n# vim: foldmethod=marker\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flake.nix b/flake.nix
--- a/flake.nix	(revision f5ccfa9807b60756af7eaa50e817202700e6f283)
+++ b/flake.nix	(date 1693607372151)
@@ -104,8 +104,8 @@
           modules = nixDarwinCommonModules ++ [
             {
               users.primaryUser = primaryUserInfo;
-              networking.computerName = "Lzyct ðŸ’»";
-              networking.hostName = "Lzyct-MBP";
+              networking.computerName = "Lzyct IKHLAS";
+              networking.hostName = "Lzyct-IKHLAS-MBP";
               networking.knownNetworkServices = [
                 "Wi-Fi"
                 "USB 10/100/1000 LAN"
